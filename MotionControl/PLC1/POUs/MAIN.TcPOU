<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="MAIN" Id="{33279380-c474-4e05-96de-0d78b49ed396}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN  
// vision 4.4 *+: TCP, 斜直線移動

VAR
	SixAxis : Controller;
	readA : REAL;
	
	bInit: BOOL := TRUE;
	fbSocketCloseAll: FB_SocketCloseAll; 
	serialize : Serialize;
	deserialize : Deserialize;
	bSocketCloseError: BOOL;
	nSocketCloseError: UDINT;
	
	TCP_Client1     				: FB_TCPClient;
		sClient1SendData			: ARRAY[0..1023] OF BYTE;
		sServer1Host				: T_IPv4Addr;
		nServer1Port				: UDINT;
		bStartClient1Communication	: BOOL 			    := TRUE;
		tClient1CycleTime			: TIME 				:= T#0.5S;
		bClient1SendTrigger			: BOOL;
		bClient1Connected			: BOOL;
		sClient1ReceivedData		: ARRAY[0..1023] OF BYTE;
		bClient1Busy				: BOOL;
		bClientError1				: BOOL;
		nClient1ErrorID1			: UDINT;
		// 新增內容
		rx                          : BYTE;
		mode                        : DINT;
		position                    : ARRAY[1..6] OF LREAL;  // xyzrpy
		tx                          : BYTE;
		fullTime                    : LREAL;
		coeffCopy                   : ARRAY[1..6, 1..6] OF LREAL;
	bAutogenerateData				: BOOL 				:= TRUE;
	fbTimer1						: TON;
	simTime                         : DINT;
	simCoeff                        : ARRAY[1..6] OF LREAL;
	nCnt							: UDINT;	
	
END_VAR

















//	L1 : ARRAY [1..6,1..6] OF LREAL;
//	L2 : ARRAY [1..6,1..6] OF LREAL;
//	L6 : ARRAY [1..6,1..6] OF LREAL;
//	L3,L5 : ARRAY [1..2] OF LREAL;
//	L4 : ARRAY [1..2] OF LREAL := [1, 2];
	
//	i: INT;
//	j: INT;
//	k : Lreal;]]></Declaration>
    <Implementation>
      <ST><![CDATA[SixAxis();
//readA := (INT_TO_REAL(GVL.input_ana[1]) / 32767) * 10;

// Transmission Program
(* On PLC reset or program download close all created/opened sockets/connections *)
// Init Step to close all sockets after login PLC with  downlaod
sServer1Host := '192.168.1.47';
nServer1Port := 200;

IF bInit THEN 			
	fbSocketCloseAll(
		sSrvNetId:= '', 
		bExecute:= TRUE, 
		tTimeout:= T#3S, 
		bBusy=> , 
		bError=> bSocketCloseError, 
		nErrId=> nSocketCloseError);
	IF NOT (fbSocketCloseAll.bBusy OR fbSocketCloseAll.bError) THEN
		bInit := FALSE;
		fbSocketCloseAll(bExecute:= FALSE);
	END_IF
ELSE
	TCP_Client1(
		nRemotePort:= nServer1Port, 								// Server port
		sRemoteHost:= sServer1Host, 								// Server IP (empty for local communication)
		bStartCommunication:= bStartClient1Communication, 			// Start communication, when FALSE, connection is closed
		sSendData:= sClient1SendData, 								// Data that are sent to the server
		tCycleTimeSend:= (*tClient1CycleTime*), 					// TimeInterval for cyclic sending
		bSendTrigger:= ,											// Trigger to send one telegramm manually 
		bConnected => bClient1Connected,							// Switches to TRUE when Client is connected to a server
		sReceivedData=> sClient1ReceivedData,						// Data that are received
		bBusy=> bClient1Busy, 
		bError=> bClientError1, 
		nErrorID=> nClient1ErrorID1, ); 
	deserialize(
		Recvbuffer := sClient1ReceivedData,
		a => rx,
		b => mode,
		c => position);
	
	IF bAutogenerateData AND bClient1Connected THEN
		fbTimer1(IN:= NOT fbTimer1.Q, PT:= tClient1CycleTime, Q=> , ET=> );
		IF fbTimer1.Q  THEN
			IF rx = 84 THEN
				SixAxis.SetMotion(
					mode, SixAxis.HomePoint, position, TRUE, FALSE,
					runTime => fullTime,
					coeffCopy => coeffCopy);
				tx := 67;
				serialize(
					a := tx,
					b := fullTime,
					c := coeffCopy,
					sendbuffer => sClient1SendData);
			
			END_IF
			TCP_Client1.bSendTrigger := TRUE;
			nCnt := nCnt + 1;
		ELSE
			TCP_Client1.bSendTrigger := FALSE;
		END_IF
	END_IF 
END_IF
























// 測試KM
//k := 1.235415445;
//k := LREAL_TO_DINT(k*EXPT(10,2) )/EXPT(10,2);
//FOR i := 1 TO 6 DO
//	FOR j := 1 TO 6 DO
//		IF i <= j THEN
//			L1[i, j] := j;
//		ELSE
//			L1[i, j] := i;
//		END_IF
//	END_FOR
//END_FOR

//FOR i := 1 TO 6 DO
//	FOR j := 1 TO 6 DO
//		IF i <= j THEN
//			L2[i, j] := i*j;
//		ELSE
//			L2[i, j] := i*i;
//		END_IF
//	END_FOR
//END_FOR

////MF.GaussianElimination(base_mat := L1, extend_mat := L2, temp_mat := L6, 6);

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="95" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="592" Count="11" />
      <LineId Id="539" Count="0" />
      <LineId Id="606" Count="8" />
      <LineId Id="709" Count="0" />
      <LineId Id="616" Count="1" />
      <LineId Id="725" Count="3" />
      <LineId Id="724" Count="0" />
      <LineId Id="618" Count="3" />
      <LineId Id="699" Count="0" />
      <LineId Id="713" Count="0" />
      <LineId Id="720" Count="2" />
      <LineId Id="803" Count="0" />
      <LineId Id="733" Count="1" />
      <LineId Id="736" Count="2" />
      <LineId Id="807" Count="0" />
      <LineId Id="714" Count="0" />
      <LineId Id="623" Count="4" />
      <LineId Id="362" Count="0" />
      <LineId Id="628" Count="1" />
      <LineId Id="363" Count="19" />
      <LineId Id="325" Count="0" />
      <LineId Id="305" Count="1" />
      <LineId Id="304" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="265" Count="7" />
      <LineId Id="249" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="259" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="88" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>